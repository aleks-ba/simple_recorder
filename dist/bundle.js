var Recorder =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__recorder__ = __webpack_require__(/*! ./recorder */ 1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__recorder___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__recorder__);\n\nvar getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\nclass MyRecorder {\n\n    constructor() {\n        this.record = event => {\n            this.currentTrackElement = event.target.closest('.track-list--item');\n            if (typeof this.baseTrack !== 'undefined') {\n                this.baseTrack.pause();\n                this.baseTrack.currentTime = 0;\n                this.baseTrack.play();\n                this.baseTrack.addEventListener('playing', () => {\n                    console.log('clear rec');\n                    this.rec.clear();\n                }, false);\n            }\n            getUserMedia.call(navigator, { audio: true }, localMediaStream => {\n                this.mediaStream = localMediaStream;\n\n                // create a stream source to pass to Recorder.js\n                var mediaStreamSource = this.context.createMediaStreamSource(localMediaStream);\n\n                // create new instance of Recorder.js using the mediaStreamSource\n                this.rec = new __WEBPACK_IMPORTED_MODULE_0__recorder___default.a(mediaStreamSource, {\n                    // pass the path to recorderWorker.js file here\n                    workerPath: '/bower_components/Recorderjs/recorderWorker.js'\n                });\n\n                // start recording\n                this.rec.record();\n            }, function (err) {\n                console.log('Browser not supported');\n            });\n        };\n\n        this.stop = () => {\n            // stop the media stream\n            // stop Recorder.js\n            this.rec.stop();\n\n            this.rec.exportWAV(this._exportToWavCallback);\n        };\n\n        this._exportToWavCallback = blob => {\n            this.rec.clear();\n\n            if (this.currentTrackElement.isRecorded) {\n                return;\n            }\n            const url = window.URL.createObjectURL(blob);\n            const audioHTML = document.createElement('audio');\n            audioHTML.src = url;\n            audioHTML.setAttribute('controls', true);\n            audioHTML.setAttribute('loop', true);\n\n            this.audioTracks.push(audioHTML);\n            this.baseTrack = this.audioTracks[0];\n\n            this.currentTrackElement.isRecorded = true;\n\n            this.currentTrackElement.appendChild(audioHTML);\n        };\n\n        this.playAllTracks = () => {\n            this.audioTracks.forEach(audio => {\n                audio.currentTime = 0;\n                audio.play();\n            });\n        };\n\n        this.addNewTrack = () => {\n            const template = `<div onclick=\"Recorder.default.record(event)\" class=\"button-control button-control-rec\"><span></span></div>\n             <div onclick=\"Recorder.default.stop()\" class=\"button-control button-control-stop\"><span></span></div>\n            `;\n\n            var trackListItemHTML = document.createElement('div');\n            trackListItemHTML.classList.add('track-list--item');\n            trackListItemHTML.innerHTML = template;\n            document.querySelector('.track-list').appendChild(trackListItemHTML);\n        };\n\n        let krakoz = 2;\n        this.mediaStream = null;\n        this.rec = null;\n        const Context = window.AudioContext || window.webkitAudioContext;\n        this.context = new Context();\n        this.audioTracks = [];\n        this.currentTrackElement = null;\n    }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (new MyRecorder());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvaW5kZXguanM/MWZkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVjb3JkZXIgZnJvbSAnLi9yZWNvcmRlcic7XHJcbnZhciBnZXRVc2VyTWVkaWEgPSBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhIHx8IG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEgfHwgbmF2aWdhdG9yLm1vekdldFVzZXJNZWRpYTtcclxuY2xhc3MgTXlSZWNvcmRlciB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgbGV0IGtyYWtveiA9IDI7XHJcbiAgICAgICAgdGhpcy5tZWRpYVN0cmVhbSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5yZWMgPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IENvbnRleHQgPSB3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gbmV3IENvbnRleHQoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvVHJhY2tzID0gW107XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VHJhY2tFbGVtZW50ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZWNvcmQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRUcmFja0VsZW1lbnQgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLnRyYWNrLWxpc3QtLWl0ZW0nKTtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYmFzZVRyYWNrICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VUcmFjay5wYXVzZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VUcmFjay5jdXJyZW50VGltZSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZVRyYWNrLnBsYXkoKTtcclxuICAgICAgICAgICAgdGhpcy5iYXNlVHJhY2suYWRkRXZlbnRMaXN0ZW5lcigncGxheWluZycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjbGVhciByZWMnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVjLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcclxuICAgICAgICB9XHJcblx0ICAgIGdldFVzZXJNZWRpYS5jYWxsKG5hdmlnYXRvcix7YXVkaW86IHRydWV9LCAobG9jYWxNZWRpYVN0cmVhbSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm1lZGlhU3RyZWFtID0gbG9jYWxNZWRpYVN0cmVhbTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhIHN0cmVhbSBzb3VyY2UgdG8gcGFzcyB0byBSZWNvcmRlci5qc1xyXG4gICAgICAgICAgICB2YXIgbWVkaWFTdHJlYW1Tb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UobG9jYWxNZWRpYVN0cmVhbSk7XHJcblxyXG4gICAgICAgICAgICAvLyBjcmVhdGUgbmV3IGluc3RhbmNlIG9mIFJlY29yZGVyLmpzIHVzaW5nIHRoZSBtZWRpYVN0cmVhbVNvdXJjZVxyXG4gICAgICAgICAgICB0aGlzLnJlYyA9IG5ldyBSZWNvcmRlcihtZWRpYVN0cmVhbVNvdXJjZSwge1xyXG4gICAgICAgICAgICAgICAgLy8gcGFzcyB0aGUgcGF0aCB0byByZWNvcmRlcldvcmtlci5qcyBmaWxlIGhlcmVcclxuICAgICAgICAgICAgICAgIHdvcmtlclBhdGg6ICcvYm93ZXJfY29tcG9uZW50cy9SZWNvcmRlcmpzL3JlY29yZGVyV29ya2VyLmpzJ1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIHN0YXJ0IHJlY29yZGluZ1xyXG4gICAgICAgICAgICB0aGlzLnJlYy5yZWNvcmQoKTtcclxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdCcm93c2VyIG5vdCBzdXBwb3J0ZWQnKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3RvcCA9ICgpID0+IHtcclxuICAgICAgICAvLyBzdG9wIHRoZSBtZWRpYSBzdHJlYW1cclxuICAgICAgICAvLyBzdG9wIFJlY29yZGVyLmpzXHJcbiAgICAgICAgdGhpcy5yZWMuc3RvcCgpO1xyXG5cclxuICAgICAgICB0aGlzLnJlYy5leHBvcnRXQVYodGhpcy5fZXhwb3J0VG9XYXZDYWxsYmFjayk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9leHBvcnRUb1dhdkNhbGxiYWNrID0gKGJsb2IpID0+IHtcclxuICAgICAgICB0aGlzLnJlYy5jbGVhcigpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50VHJhY2tFbGVtZW50LmlzUmVjb3JkZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgICAgICBjb25zdCBhdWRpb0hUTUwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpO1xyXG4gICAgICAgIGF1ZGlvSFRNTC5zcmMgPSB1cmw7XHJcbiAgICAgICAgYXVkaW9IVE1MLnNldEF0dHJpYnV0ZSgnY29udHJvbHMnLCB0cnVlKTtcclxuICAgICAgICBhdWRpb0hUTUwuc2V0QXR0cmlidXRlKCdsb29wJywgdHJ1ZSk7XHJcblxyXG4gICAgICAgIHRoaXMuYXVkaW9UcmFja3MucHVzaChhdWRpb0hUTUwpO1xyXG4gICAgICAgIHRoaXMuYmFzZVRyYWNrID0gdGhpcy5hdWRpb1RyYWNrc1swXTtcclxuXHJcbiAgICAgICAgdGhpcy5jdXJyZW50VHJhY2tFbGVtZW50LmlzUmVjb3JkZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmN1cnJlbnRUcmFja0VsZW1lbnQuYXBwZW5kQ2hpbGQoYXVkaW9IVE1MKTtcclxuICAgIH07XHJcblxyXG4gICAgcGxheUFsbFRyYWNrcyA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmF1ZGlvVHJhY2tzLmZvckVhY2goKGF1ZGlvKSA9PiB7XHJcbiAgICAgICAgICAgIGF1ZGlvLmN1cnJlbnRUaW1lID0gMDtcclxuICAgICAgICAgICAgYXVkaW8ucGxheSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBhZGROZXdUcmFjayA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9XHJcbiAgICAgICAgICAgIGA8ZGl2IG9uY2xpY2s9XCJSZWNvcmRlci5kZWZhdWx0LnJlY29yZChldmVudClcIiBjbGFzcz1cImJ1dHRvbi1jb250cm9sIGJ1dHRvbi1jb250cm9sLXJlY1wiPjxzcGFuPjwvc3Bhbj48L2Rpdj5cclxuICAgICAgICAgICAgIDxkaXYgb25jbGljaz1cIlJlY29yZGVyLmRlZmF1bHQuc3RvcCgpXCIgY2xhc3M9XCJidXR0b24tY29udHJvbCBidXR0b24tY29udHJvbC1zdG9wXCI+PHNwYW4+PC9zcGFuPjwvZGl2PlxyXG4gICAgICAgICAgICBgO1xyXG5cclxuICAgICAgICB2YXIgdHJhY2tMaXN0SXRlbUhUTUwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0cmFja0xpc3RJdGVtSFRNTC5jbGFzc0xpc3QuYWRkKCd0cmFjay1saXN0LS1pdGVtJyk7XHJcbiAgICAgICAgdHJhY2tMaXN0SXRlbUhUTUwuaW5uZXJIVE1MID0gdGVtcGxhdGU7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRyYWNrLWxpc3QnKS5hcHBlbmRDaGlsZCh0cmFja0xpc3RJdGVtSFRNTCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgTXlSZWNvcmRlcigpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvaW5kZXguanMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF2Q0E7QUF5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEvQ0E7QUFpREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFuRUE7QUFxRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBMUVBO0FBNEVBOztBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFyRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWEE7QUFDQTtBQTBGQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!*************************!*\
  !*** ./src/recorder.js ***!
  \*************************/
/*! no static exports found */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var require;var require;(function (f) {\n    if (true) {\n        module.exports = f();\n    } else if (typeof define === \"function\" && define.amd) {\n        define([], f);\n    } else {\n        var g;if (typeof window !== \"undefined\") {\n            g = window;\n        } else if (typeof global !== \"undefined\") {\n            g = global;\n        } else if (typeof self !== \"undefined\") {\n            g = self;\n        } else {\n            g = this;\n        }g.Recorder = f();\n    }\n})(function () {\n    var define, module, exports;return function e(t, n, r) {\n        function s(o, u) {\n            if (!n[o]) {\n                if (!t[o]) {\n                    var a = typeof require == \"function\" && require;if (!u && a) return require(o, !0);if (i) return i(o, !0);var f = new Error(\"Cannot find module '\" + o + \"'\");throw f.code = \"MODULE_NOT_FOUND\", f;\n                }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {\n                    var n = t[o][1][e];return s(n ? n : e);\n                }, l, l.exports, e, t, n, r);\n            }return n[o].exports;\n        }var i = typeof require == \"function\" && require;for (var o = 0; o < r.length; o++) s(r[o]);return s;\n    }({ 1: [function (require, module, exports) {\n            \"use strict\";\n\n            module.exports = require(\"./recorder\").Recorder;\n        }, { \"./recorder\": 2 }], 2: [function (require, module, exports) {\n            'use strict';\n\n            var _createClass = function () {\n                function defineProperties(target, props) {\n                    for (var i = 0; i < props.length; i++) {\n                        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }return function (Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n                };\n            }();\n\n            Object.defineProperty(exports, \"__esModule\", {\n                value: true\n            });\n            exports.Recorder = undefined;\n\n            var _inlineWorker = require('inline-worker');\n\n            var _inlineWorker2 = _interopRequireDefault(_inlineWorker);\n\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : { default: obj };\n            }\n\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n\n            var Recorder = exports.Recorder = function () {\n                function Recorder(source, cfg) {\n                    var _this = this;\n\n                    _classCallCheck(this, Recorder);\n\n                    this.config = {\n                        bufferLen: 4096,\n                        numChannels: 2,\n                        mimeType: 'audio/wav'\n                    };\n                    this.recording = false;\n                    this.callbacks = {\n                        getBuffer: [],\n                        exportWAV: []\n                    };\n\n                    Object.assign(this.config, cfg);\n                    this.context = source.context;\n                    this.node = (this.context.createScriptProcessor || this.context.createJavaScriptNode).call(this.context, this.config.bufferLen, this.config.numChannels, this.config.numChannels);\n\n                    this.node.onaudioprocess = function (e) {\n                        if (!_this.recording) return;\n\n                        var buffer = [];\n                        for (var channel = 0; channel < _this.config.numChannels; channel++) {\n                            buffer.push(e.inputBuffer.getChannelData(channel));\n                        }\n                        _this.worker.postMessage({\n                            command: 'record',\n                            buffer: buffer\n                        });\n                    };\n\n                    source.connect(this.node);\n                    this.node.connect(this.context.destination); //this should not be necessary\n\n                    var self = {};\n                    this.worker = new _inlineWorker2.default(function () {\n                        var recLength = 0,\n                            recBuffers = [],\n                            sampleRate = undefined,\n                            numChannels = undefined;\n\n                        self.onmessage = function (e) {\n                            switch (e.data.command) {\n                                case 'init':\n                                    init(e.data.config);\n                                    break;\n                                case 'record':\n                                    record(e.data.buffer);\n                                    break;\n                                case 'exportWAV':\n                                    exportWAV(e.data.type);\n                                    break;\n                                case 'getBuffer':\n                                    getBuffer();\n                                    break;\n                                case 'clear':\n                                    clear();\n                                    break;\n                            }\n                        };\n\n                        function init(config) {\n                            sampleRate = config.sampleRate;\n                            numChannels = config.numChannels;\n                            initBuffers();\n                        }\n\n                        function record(inputBuffer) {\n                            for (var channel = 0; channel < numChannels; channel++) {\n                                recBuffers[channel].push(inputBuffer[channel]);\n                            }\n                            recLength += inputBuffer[0].length;\n                        }\n\n                        function exportWAV(type) {\n                            var buffers = [];\n                            for (var channel = 0; channel < numChannels; channel++) {\n                                buffers.push(mergeBuffers(recBuffers[channel], recLength));\n                            }\n                            var interleaved = undefined;\n                            if (numChannels === 2) {\n                                interleaved = interleave(buffers[0], buffers[1]);\n                            } else {\n                                interleaved = buffers[0];\n                            }\n                            var dataview = encodeWAV(interleaved);\n                            var audioBlob = new Blob([dataview], { type: type });\n\n                            self.postMessage({ command: 'exportWAV', data: audioBlob });\n                        }\n\n                        function getBuffer() {\n                            var buffers = [];\n                            for (var channel = 0; channel < numChannels; channel++) {\n                                buffers.push(mergeBuffers(recBuffers[channel], recLength));\n                            }\n                            self.postMessage({ command: 'getBuffer', data: buffers });\n                        }\n\n                        function clear() {\n                            recLength = 0;\n                            recBuffers = [];\n                            initBuffers();\n                        }\n\n                        function initBuffers() {\n                            for (var channel = 0; channel < numChannels; channel++) {\n                                recBuffers[channel] = [];\n                            }\n                        }\n\n                        function mergeBuffers(recBuffers, recLength) {\n                            var result = new Float32Array(recLength);\n                            var offset = 0;\n                            for (var i = 0; i < recBuffers.length; i++) {\n                                result.set(recBuffers[i], offset);\n                                offset += recBuffers[i].length;\n                            }\n                            return result;\n                        }\n\n                        function interleave(inputL, inputR) {\n                            var length = inputL.length + inputR.length;\n                            var result = new Float32Array(length);\n\n                            var index = 0,\n                                inputIndex = 0;\n\n                            while (index < length) {\n                                result[index++] = inputL[inputIndex];\n                                result[index++] = inputR[inputIndex];\n                                inputIndex++;\n                            }\n                            return result;\n                        }\n\n                        function floatTo16BitPCM(output, offset, input) {\n                            for (var i = 0; i < input.length; i++, offset += 2) {\n                                var s = Math.max(-1, Math.min(1, input[i]));\n                                output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n                            }\n                        }\n\n                        function writeString(view, offset, string) {\n                            for (var i = 0; i < string.length; i++) {\n                                view.setUint8(offset + i, string.charCodeAt(i));\n                            }\n                        }\n\n                        function encodeWAV(samples) {\n                            var buffer = new ArrayBuffer(44 + samples.length * 2);\n                            var view = new DataView(buffer);\n\n                            /* RIFF identifier */\n                            writeString(view, 0, 'RIFF');\n                            /* RIFF chunk length */\n                            view.setUint32(4, 36 + samples.length * 2, true);\n                            /* RIFF type */\n                            writeString(view, 8, 'WAVE');\n                            /* format chunk identifier */\n                            writeString(view, 12, 'fmt ');\n                            /* format chunk length */\n                            view.setUint32(16, 16, true);\n                            /* sample format (raw) */\n                            view.setUint16(20, 1, true);\n                            /* channel count */\n                            view.setUint16(22, numChannels, true);\n                            /* sample rate */\n                            view.setUint32(24, sampleRate, true);\n                            /* byte rate (sample rate * block align) */\n                            view.setUint32(28, sampleRate * 4, true);\n                            /* block align (channel count * bytes per sample) */\n                            view.setUint16(32, numChannels * 2, true);\n                            /* bits per sample */\n                            view.setUint16(34, 16, true);\n                            /* data chunk identifier */\n                            writeString(view, 36, 'data');\n                            /* data chunk length */\n                            view.setUint32(40, samples.length * 2, true);\n\n                            floatTo16BitPCM(view, 44, samples);\n\n                            return view;\n                        }\n                    }, self);\n\n                    this.worker.postMessage({\n                        command: 'init',\n                        config: {\n                            sampleRate: this.context.sampleRate,\n                            numChannels: this.config.numChannels\n                        }\n                    });\n\n                    this.worker.onmessage = function (e) {\n                        var cb = _this.callbacks[e.data.command].pop();\n                        if (typeof cb == 'function') {\n                            cb(e.data.data);\n                        }\n                    };\n                }\n\n                _createClass(Recorder, [{\n                    key: 'record',\n                    value: function record() {\n                        this.recording = true;\n                    }\n                }, {\n                    key: 'stop',\n                    value: function stop() {\n                        this.recording = false;\n                    }\n                }, {\n                    key: 'clear',\n                    value: function clear() {\n                        this.worker.postMessage({ command: 'clear' });\n                    }\n                }, {\n                    key: 'getBuffer',\n                    value: function getBuffer(cb) {\n                        cb = cb || this.config.callback;\n                        if (!cb) throw new Error('Callback not set');\n\n                        this.callbacks.getBuffer.push(cb);\n\n                        this.worker.postMessage({ command: 'getBuffer' });\n                    }\n                }, {\n                    key: 'exportWAV',\n                    value: function exportWAV(cb, mimeType) {\n                        mimeType = mimeType || this.config.mimeType;\n                        cb = cb || this.config.callback;\n                        if (!cb) throw new Error('Callback not set');\n\n                        this.callbacks.exportWAV.push(cb);\n\n                        this.worker.postMessage({\n                            command: 'exportWAV',\n                            type: mimeType\n                        });\n                    }\n                }], [{\n                    key: 'forceDownload',\n                    value: function forceDownload(blob, filename) {\n                        var url = (window.URL || window.webkitURL).createObjectURL(blob);\n                        var link = window.document.createElement('a');\n                        link.href = url;\n                        link.download = filename || 'output.wav';\n                        var click = document.createEvent(\"Event\");\n                        click.initEvent(\"click\", true, true);\n                        link.dispatchEvent(click);\n                    }\n                }]);\n\n                return Recorder;\n            }();\n\n            exports.default = Recorder;\n        }, { \"inline-worker\": 3 }], 3: [function (require, module, exports) {\n            \"use strict\";\n\n            module.exports = require(\"./inline-worker\");\n        }, { \"./inline-worker\": 4 }], 4: [function (require, module, exports) {\n            (function (global) {\n                \"use strict\";\n\n                var _createClass = function () {\n                    function defineProperties(target, props) {\n                        for (var key in props) {\n                            var prop = props[key];prop.configurable = true;if (prop.value) prop.writable = true;\n                        }Object.defineProperties(target, props);\n                    }return function (Constructor, protoProps, staticProps) {\n                        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n                    };\n                }();\n\n                var _classCallCheck = function (instance, Constructor) {\n                    if (!(instance instanceof Constructor)) {\n                        throw new TypeError(\"Cannot call a class as a function\");\n                    }\n                };\n\n                var WORKER_ENABLED = !!(global === global.window && global.URL && global.Blob && global.Worker);\n\n                var InlineWorker = function () {\n                    function InlineWorker(func, self) {\n                        var _this = this;\n\n                        _classCallCheck(this, InlineWorker);\n\n                        if (WORKER_ENABLED) {\n                            var functionBody = func.toString().trim().match(/^function\\s*\\w*\\s*\\([\\w\\s,]*\\)\\s*{([\\w\\W]*?)}$/)[1];\n                            var url = global.URL.createObjectURL(new global.Blob([functionBody], { type: \"text/javascript\" }));\n\n                            return new global.Worker(url);\n                        }\n\n                        this.self = self;\n                        this.self.postMessage = function (data) {\n                            setTimeout(function () {\n                                _this.onmessage({ data: data });\n                            }, 0);\n                        };\n\n                        setTimeout(function () {\n                            func.call(self);\n                        }, 0);\n                    }\n\n                    _createClass(InlineWorker, {\n                        postMessage: {\n                            value: function postMessage(data) {\n                                var _this = this;\n\n                                setTimeout(function () {\n                                    _this.self.onmessage({ data: data });\n                                }, 0);\n                            }\n                        }\n                    });\n\n                    return InlineWorker;\n                }();\n\n                module.exports = InlineWorker;\n            }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n        }, {}] }, {}, [1])(1);\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/MzY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ })
/******/ ]);